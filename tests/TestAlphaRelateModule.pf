
!###############################################################################

module TestAlphaRelateModule
  use ISO_Fortran_env
  use pFUnit_mod
  use AlphaRelateModule

  implicit none

  contains

    !###########################################################################

    @before
    subroutine Setup
      implicit none
    end subroutine

    !###########################################################################

    @after
    subroutine Finish
      implicit none
    end subroutine

    !###########################################################################

    subroutine CreateTinyPedigreeExampleFile
      implicit none
      integer(int32) :: PedUnit
      open(newunit=PedUnit, file="TestPedigreeExample.txt", status="unknown")
      ! From the Mrode's book (2014)
      write(PedUnit, "(a)") "A 0 0"
      write(PedUnit, "(a)") "B 0 0"
      write(PedUnit, "(a)") "C A B"
      write(PedUnit, "(a)") "D A 0"
      write(PedUnit, "(a)") "E D C"
      write(PedUnit, "(a)") "F E B"
      close(PedUnit)
    end subroutine

    !###########################################################################

    subroutine CreatePedigreeExampleFile
      implicit none
      integer(int32) :: PedUnit
      open(newunit=PedUnit, file="TestPedigreeExample.txt", status="unknown")
      ! From Garcia-Cortes et al. (2013) http://dx.doi.org/10.1371/journal.pone.0057003
      write(PedUnit, "(a)") "Porto 0 0"
      write(PedUnit, "(a)") "OldMoll 0 0"
      write(PedUnit, "(a)") "Dash1 Porto OldMoll"
      write(PedUnit, "(a)") "Belle1 Porto OldMoll"
      write(PedUnit, "(a)") "Cora1 Dash1 Belle1"
      write(PedUnit, "(a)") "Moll2 Dash1 Belle1"
      write(PedUnit, "(a)") "Pilot Dash1 Belle1"
      write(PedUnit, "(a)") "Peg Dash1 Moll2"
      write(PedUnit, "(a)") "Rock Pilot Moll2"
      write(PedUnit, "(a)") "Regent Pilot Moll2"
      write(PedUnit, "(a)") "Jet1 Pilot Moll2"
      write(PedUnit, "(a)") "RockA Peg Rock"
      write(PedUnit, "(a)") "CoraBlairs Regent Jet1"
      write(PedUnit, "(a)") "Rock2 Regent Jet1"
      write(PedUnit, "(a)") "Fred1 RockA Moll2"
      write(PedUnit, "(a)") "Sting CoraBlairs Rock2"
      write(PedUnit, "(a)") "Belle2 CoraBlairs Rock2"
      write(PedUnit, "(a)") "Cora2 Cora1 Fred1"
      write(PedUnit, "(a)") "Dash2 Cora2 Sting"
      write(PedUnit, "(a)") "Moll3 Fred1 Belle2"
      close(PedUnit)
    end subroutine

    !###########################################################################

    subroutine DeletePedigreeExampleFile
      implicit none
      integer(int32) :: PedUnit
      open(newunit=PedUnit, file="TestPedigreeExample.txt", status="old")
      close(PedUnit, status="delete")
    end subroutine

    !###########################################################################

    @test
    subroutine TestPedInbreeding
      implicit none
      type(AlphaRelateSpec) :: Spec
      type(AlphaRelateData) :: Data
      integer(int32) :: i
      real(real64), allocatable :: ExpPedInbreeding(:)

      call CreateTinyPedigreeExampleFile
      Spec = AlphaRelateSpec()
      Spec%PedigreePresent = .true.
      Spec%PedigreeFile = "TestPedigreeExample.txt"
      Data = AlphaRelateData(Spec=Spec)
      call Data%CalcPedInbreeding()
      allocate(ExpPedInbreeding(0:Data%nIndPed))
      ExpPedInbreeding(1:Data%nIndPed) = (/0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.125/)
      do i = 1, Data%nIndPed
        !print*, i, Data%RecPed%OriginalId(i), Data%PedInbreeding(i), ExpPedInbreeding(i)
        @AssertEqual(Data%PedInbreeding(i), ExpPedInbreeding(i))
      end do
      deallocate(ExpPedInbreeding)
      call DeletePedigreeExampleFile

      call CreatePedigreeExampleFile
      Spec = AlphaRelateSpec()
      Spec%PedigreePresent = .true.
      Spec%PedigreeFile = "TestPedigreeExample.txt"
      Data = AlphaRelateData(Spec=Spec)
      call Data%CalcPedInbreeding()
      allocate(ExpPedInbreeding(0:Data%nIndPed))
      ExpPedInbreeding(1:Data%nIndPed) = (/0.0,    0.0,    0.0, 0.0, 0.25, 0.25,    0.25,   0.375,  0.375,    0.375, &
                                           0.375,  0.4375, 0.5, 0.5, 0.5,  0.59375, 0.59375, 0.375, 0.484375, 0.4296875/)
      do i = 1, Data%nIndPed
        !print*, i, Data%RecPed%OriginalId(i), Data%PedInbreeding(i), ExpPedInbreeding(i)
        @AssertEqual(Data%PedInbreeding(i), ExpPedInbreeding(i))
      end do
      deallocate(ExpPedInbreeding)
      call DeletePedigreeExampleFile
    end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeAMatrix
    !   implicit none

    !   real(real64), allocatable :: AMatTarget(:, :)

    !   ! Setup
    !   nAnisP = 6
    !   allocate(RecPed(nAnisP, 3))
    !   allocate(AMat(nAnisP, nAnisP))
    !   allocate(AMatTarget(nAnisP, nAnisP))
    !   ! TODO: Ideally would not need to setup this, but ... can we stick this in @before or how do we handle this "stuff"
    !   !       (reorganise subroutines)?
    !   ! OldAMatPresent = .false.
    !   ! AFullMat = .false.
    !   ! AIJA = .false.
    !   ! MakeH = .false.
    !   ! MakeHInv = .false.
    !   ! ScaleGByRegression = .false.

    !   ! Henderson example
    !   RecPed(1, :) = (/1, 0, 0/)
    !   RecPed(2, :) = (/2, 0, 0/)
    !   RecPed(3, :) = (/3, 1, 2/)
    !   RecPed(4, :) = (/4, 1, 0/)
    !   RecPed(5, :) = (/5, 4, 3/)
    !   RecPed(6, :) = (/6, 5, 2/)

    !   !AMatTarget(1, :) = (/1.0d0,       0.0d0,       1.0d0/ 2.0d0, 1.0d0/ 2.0d0,  1.0d0/ 2.0d0,  1.0d0/ 4.0d0/)
    !   !AMatTarget(2, :) = (/0.0d0,       1.0d0,       1.0d0/ 2.0d0, 0.0d0,         1.0d0/ 4.0d0,  5.0d0/ 8.0d0/)
    !   !AMatTarget(3, :) = (/1.0d0/2.0d0, 1.0d0/2.0d0, 1.0d0,        1.0d0/ 4.0d0,  5.0d0/ 8.0d0,  9.0d0/16.0d0/)
    !   !AMatTarget(4, :) = (/1.0d0/2.0d0, 0.0d0,       1.0d0/ 4.0d0, 1.0d0,         5.0d0/ 8.0d0,  5.0d0/16.0d0/)
    !   !AMatTarget(5, :) = (/1.0d0/2.0d0, 1.0d0/4.0d0, 5.0d0/ 8.0d0, 5.0d0/ 8.0d0,  9.0d0/ 8.0d0, 11.0d0/16.0d0/)
    !   !AMatTarget(6, :) = (/1.0d0/4.0d0, 5.0d0/8.0d0, 9.0d0/16.0d0, 5.0d0/16.0d0, 11.0d0/16.0d0,  9.0d0/ 8.0d0/)

    !   !call MakeAMatrix

    !   !@assertEqual(AMat, AMatTarget, "Pedigree NRM is not correct")
    ! end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeInvAMatrix
    !   implicit none

    !   real(real64), allocatable :: InvAMatTarget(:, :)

    !   ! Setup
    !   nAnisP = 6
    !   allocate(RecPed(nAnisP, 3))
    !   allocate(InvAMat(nAnisP, nAnisP))
    !   allocate(InvAMatTarget(nAnisP, nAnisP))
    !   ! TODO: Ideally would not need to setup this, but ... can we stick this in @before or how do we handle this "stuff"
    !   !       (reorganise subroutines)?
    !   ! OldAMatPresent = .false.
    !   ! AFullMat = .false.
    !   ! AIJA = .false.
    !   ! MakeH = .false.
    !   ! MakeHInv = .false.
    !   ! ScaleGByRegression = .false.

    !   ! Henderson example
    !   RecPed(1, :) = (/1, 0, 0/)
    !   RecPed(2, :) = (/2, 0, 0/)
    !   RecPed(3, :) = (/3, 1, 2/)
    !   RecPed(4, :) = (/4, 1, 0/)
    !   RecPed(5, :) = (/5, 4, 3/)
    !   RecPed(6, :) = (/6, 5, 2/)

    !   !InvAMatTarget(1, :) = (/11.0d0/6.0d0,   1.0d0/ 2.0d0, -1.0d0,       -2.0d0/3.0d0,   0.0d0,          0.0d0       /)
    !   !InvAMatTarget(2, :) = (/ 1.0d0/2.0d0,  61.0d0/30.0d0, -1.0d0,        0.0d0,         8.0d0/15.0d0, -16.0d0/15.0d0/)
    !   !InvAMatTarget(3, :) = (/-1.0d0,        -1.0d0,         5.0d0/2.0d0,  1.0d0/2.0d0,  -1.0d0,          0.0d0       /)
    !   !InvAMatTarget(4, :) = (/-2.0d0/3.0d0,   0.0d0,         1.0d0/2.0d0, 11.0d0/6.0d0,  -1.0d0,          0.0d0       /)
    !   !InvAMatTarget(5, :) = (/ 0.0d0,         8.0d0/15.0d0, -1.0d0,       -1.0d0,        38.0d0/15.0d0, -16.0d0/15.0d0/)
    !   !InvAMatTarget(6, :) = (/ 0.0d0,       -16.0d0/15.0d0,  0.0d0,        0.0d0,       -16.0d0/15.0d0,  32.0d0/15.0d0/)

    !   !call MakeInvAMatrix

    !   @assertEqual(InvAMat, InvAMatTarget, "Inverse of pedigree NRM is not correct")
    ! end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeGMatrixNejatiJavaremi
    !   implicit none

    !   real(real64), allocatable :: GMatTarget(:, :, :)

    !   ! Setup
    !   nAnisG = 3
    !   nSnp = 1
    !   allocate(Genos(nAnisG, nSnp))
    !   allocate(GMat(nAnisG, nAnisG, 1))
    !   allocate(GMatTarget(nAnisG, nAnisG, 1))

    !   !GType = "Nejati-Javaremi"

    !   ! Simple example
    !   Genos(1, :) = 0
    !   Genos(2, :) = 1
    !   Genos(3, :) = 2

    !   !GMatTarget(1, :, 1) = (/2.0d0, 1.0d0, 0.0d0/)
    !   !GMatTarget(2, :, 1) = (/1.0d0, 1.0d0, 1.0d0/)
    !   !GMatTarget(3, :, 1) = (/0.0d0, 1.0d0, 2.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Nejati-Javaremi for the first marker is not correct")

    !   ! Another simple example
    !   Genos(1, :) = 1
    !   Genos(2, :) = 2
    !   Genos(3, :) = 1

    !   !GMatTarget(1, :, 1) = (/1.0d0, 1.0d0, 1.0d0/)
    !   !GMatTarget(2, :, 1) = (/1.0d0, 2.0d0, 1.0d0/)
    !   !GMatTarget(3, :, 1) = (/1.0d0, 1.0d0, 1.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Nejati-Javaremi for the second marker is not correct")

    !   ! Combine the above two simple examples
    !   deallocate(Genos)
    !   nSnp = 2
    !   allocate(Genos(nAnisG, nSnp))

    !   Genos(1, :) = (/0, 1/)
    !   Genos(2, :) = (/1, 2/)
    !   Genos(3, :) = (/2, 1/)

    !   !GMatTarget(1, :, 1) = (/1.5d0, 1.0d0, 0.5d0/)
    !   !GMatTarget(2, :, 1) = (/1.0d0, 1.5d0, 1.0d0/)
    !   !GMatTarget(3, :, 1) = (/0.5d0, 1.0d0, 1.5d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Nejati-Javaremi for the two markers is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 1.00d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Nejati-Javaremi with equal weights is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 0.50d0/)

    !   !GMatTarget(1, :, 1) = (/1.25d0, 0.75d0, 0.25d0/)
    !   !GMatTarget(2, :, 1) = (/0.75d0, 1.00d0, 0.75d0/)
    !   !GMatTarget(3, :, 1) = (/0.25d0, 0.75d0, 1.25d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Nejati-Javaremi with variable weights is not correct")
    ! end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeGMatrixVanRaden1
    !   implicit none

    !   real(real64), allocatable :: GMatTarget(:, :, :)

    !   ! Setup
    !   nAnisG = 3
    !   nSnp = 1
    !   allocate(Genos(nAnisG, nSnp))
    !   allocate(GMat(nAnisG, nAnisG, 1))
    !   allocate(GMatTarget(nAnisG, nAnisG, 1))

    !   !GType = "VanRaden"

    !   ! Simple example
    !   Genos(1, :) = 0
    !   Genos(2, :) = 1
    !   Genos(3, :) = 2

    !   !GMatTarget(1, :, 1) = (/ 2.0d0, 0.0d0, -2.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 0.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-2.0d0, 0.0d0,  2.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 for the first marker is not correct")

    !   ! Another simple example
    !   Genos(1, :) = 1
    !   Genos(2, :) = 2
    !   Genos(3, :) = 1

    !   !GMatTarget(1, :, 1) = (/ 0.25d0, -0.5d0,  0.25d0/)
    !   !GMatTarget(2, :, 1) = (/-0.50d0,  1.0d0, -0.50d0/)
    !   !GMatTarget(3, :, 1) = (/ 0.25d0, -0.5d0,  0.25d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 for the second marker is not correct")

    !   ! Combine the above two simple examples
    !   deallocate(Genos)
    !   nSnp = 2
    !   allocate(Genos(nAnisG, nSnp))

    !   Genos(1, :) = (/0, 1/)
    !   Genos(2, :) = (/1, 2/)
    !   Genos(3, :) = (/2, 1/)

    !   !GMatTarget(1, :, 1) = (/ 20.0d0, -4.0d0, -16.0d0/)
    !   !GMatTarget(2, :, 1) = (/ -4.0d0,  8.0d0,  -4.0d0/)
    !   !GMatTarget(3, :, 1) = (/-16.0d0, -4.0d0,  20.0d0/)
    !   !GMatTarget(:, :, 1) = GMatTarget(:, :, 1) / 17.0d0

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 for the two markers is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 1.00d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 with equal weights is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 0.50d0/)

    !   !GMatTarget(1, :, 1) = (/ 19.0d0, -2.0d0, -17.0d0/)
    !   !GMatTarget(2, :, 1) = (/ -2.0d0,  4.0d0,  -2.0d0/)
    !   !GMatTarget(3, :, 1) = (/-17.0d0, -2.0d0,  19.0d0/)
    !   !GMatTarget(:, :, 1) = GMatTarget(:, :, 1) / 17.0d0

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 with variable weights is not correct")

    !   !WeightsPresent = .false.
    !   AlleleFreq(:) = (/0.5d0, 0.5d0/)

    !   !GMatTarget(1, :, 1) = (/ 1.0d0, 0.0d0, -1.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 1.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-1.0d0, 0.0d0,  1.0d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 1 with given/fixed allele frequencies is not correct")
    ! end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeGMatrixVanRaden2
    !   implicit none

    !   real(real64), allocatable :: GMatTarget(:, :, :)

    !   ! Setup
    !   nAnisG = 3
    !   nSnp = 1
    !   allocate(Genos(nAnisG, nSnp))
    !   allocate(GMat(nAnisG, nAnisG, 1))
    !   allocate(GMatTarget(nAnisG, nAnisG, 1))

    !   !GType = "VanRaden2"

    !   ! Simple example
    !   Genos(1, :) = 0
    !   Genos(2, :) = 1
    !   Genos(3, :) = 2

    !   !GMatTarget(1, :, 1) = (/ 2.0d0, 0.0d0, -2.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 0.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-2.0d0, 0.0d0,  2.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 for the first marker is not correct")

    !   ! Another simple example
    !   Genos(1, :) = 1
    !   Genos(2, :) = 2
    !   Genos(3, :) = 1

    !   !GMatTarget(1, :, 1) = (/ 0.25d0, -0.5d0,  0.25d0/)
    !   !GMatTarget(2, :, 1) = (/-0.50d0,  1.0d0, -0.50d0/)
    !   !GMatTarget(3, :, 1) = (/ 0.25d0, -0.5d0,  0.25d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 for the second marker is not correct")

    !   ! Combine the above two simple examples
    !   deallocate(Genos)
    !   nSnp = 2
    !   allocate(Genos(nAnisG, nSnp))

    !   Genos(1, :) = (/0, 1/)
    !   Genos(2, :) = (/1, 2/)
    !   Genos(3, :) = (/2, 1/)

    !   !GMatTarget(1, :, 1) = (/ 1.125d0, -0.25d0, -0.875d0/)
    !   !GMatTarget(2, :, 1) = (/-0.250d0,  0.50d0, -0.250d0/)
    !   !GMatTarget(3, :, 1) = (/-0.875d0, -0.25d0,  1.125d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 for the two markers is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 1.00d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 with equal weights is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 0.50d0/)

    !   !GMatTarget(1, :, 1) = (/ 1.0625d0, -0.125d0, -0.9375d0/)
    !   !GMatTarget(2, :, 1) = (/-0.1250d0,  0.250d0, -0.1250d0/)
    !   !GMatTarget(3, :, 1) = (/-0.9375d0, -0.125d0,  1.0625d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 with variable weights is not correct")

    !   !WeightsPresent = .false.
    !   AlleleFreq(:) = (/0.5d0, 0.5d0/)

    !   !GMatTarget(1, :, 1) = (/ 1.0d0, 0.0d0, -1.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 1.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-1.0d0, 0.0d0,  1.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 with given/fixed allele frequencies is not correct")
    ! end subroutine

    !###########################################################################

    ! @test
    ! subroutine TestMakeGMatrixYang
    !   implicit none

    !   real(real64), allocatable :: GMatTarget(:, :, :)

    !   ! Setup
    !   nAnisG = 3
    !   nSnp = 1
    !   allocate(Genos(nAnisG, nSnp))
    !   allocate(GMat(nAnisG, nAnisG, 1))
    !   allocate(GMatTarget(nAnisG, nAnisG, 1))

    !   !GType = "Yang"

    !   ! Simple example
    !   Genos(1, :) = 0
    !   Genos(2, :) = 1
    !   Genos(3, :) = 2

    !   !GMatTarget(1, :, 1) = (/ 2.0d0, 0.0d0, -2.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 0.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-2.0d0, 0.0d0,  2.0d0/)

    !   !call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Yang for the first marker is not correct")

    !   ! Another simple example
    !   Genos(1, :) = 1
    !   Genos(2, :) = 2
    !   Genos(3, :) = 1

    !   !GMatTarget(1, :, 1) = (/ 0.00d0, -0.5d0,  0.25d0/)
    !   !GMatTarget(2, :, 1) = (/-0.50d0,  1.5d0, -0.50d0/)
    !   !GMatTarget(3, :, 1) = (/ 0.25d0, -0.5d0,  0.00d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Yang for the second marker is not correct")

    !   ! Combine the above two simple examples
    !   deallocate(Genos)
    !   nSnp = 2
    !   allocate(Genos(nAnisG, nSnp))

    !   Genos(1, :) = (/0, 1/)
    !   Genos(2, :) = (/1, 2/)
    !   Genos(3, :) = (/2, 1/)

    !   !GMatTarget(1, :, 1) = (/ 1.000d0, -0.25d0, -0.875d0/)
    !   !GMatTarget(2, :, 1) = (/-0.250d0,  0.75d0, -0.250d0/)
    !   !GMatTarget(3, :, 1) = (/-0.875d0, -0.25d0,  1.000d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Yang for the two markers is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 1.00d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Yang with equal weights is not correct")

    !   !WeightsPresent = .true.
    !   !Weights(:, 1) = (/1.0d0, 0.50d0/)

    !   !GMatTarget(1, :, 1) = (/ 1.0000d0, -0.125d0, -0.9375d0/)
    !   !GMatTarget(2, :, 1) = (/-0.1250d0,  0.375d0, -0.1250d0/)
    !   !GMatTarget(3, :, 1) = (/-0.9375d0, -0.125d0,  1.0000d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - VanRaden type 2 with variable weights is not correct")

    !   !WeightsPresent = .false.
    !   AlleleFreq(:) = (/0.5d0, 0.5d0/)

    !   !GMatTarget(1, :, 1) = (/ 1.0d0, 0.0d0, -1.0d0/)
    !   !GMatTarget(2, :, 1) = (/ 0.0d0, 1.0d0,  0.0d0/)
    !   !GMatTarget(3, :, 1) = (/-1.0d0, 0.0d0,  1.0d0/)

    !   call MakeGAndInvGMatrix

    !   @assertEqual(GMat, GMatTarget, "Genomic NRM - Yang with given/fixed allele frequencies is not correct")
    ! end subroutine

    !###########################################################################

end module

!###############################################################################
