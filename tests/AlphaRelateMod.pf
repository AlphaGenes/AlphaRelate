
@test
subroutine TestMakeA()

  use pFUnit_mod
  use ISO_Fortran_env
  use AlphaRelateMod

  implicit none

  real(real64), allocatable :: AmatTarget(:, :)

  ! Setup stuff
  nAnisP = 6
  allocate(RecPed(nAnisP, 3))
  RecPed(1, :) = (/1, 0, 0/)
  RecPed(2, :) = (/2, 0, 0/)
  RecPed(3, :) = (/3, 1, 2/)
  RecPed(4, :) = (/4, 1, 0/)
  RecPed(5, :) = (/5, 4, 3/)
  RecPed(6, :) = (/6, 5, 2/)

  allocate(Amat(nAnisP, nAnisP))
  allocate(AmatTarget(nAnisP, nAnisP))

  ! TODO: Ideally would not need to setup this, but ... can we stick them in @before?
  ! OldAmatPresent = .false.
  ! AFullMat = .false.
  ! AIJA = .false.
  ! MakeH = .false.
  ! MakeHInv = .false.
  ! ScaleGByRegression = .false.

  !AmatTarget(1, :) = (/1.0d0,       0.0d0,       1.0d0/ 2.0d0, 1.0d0/ 2.0d0,  1.0d0/ 2.0d0,  1.0d0/ 4.0d0/)
  !AmatTarget(2, :) = (/0.0d0,       1.0d0,       1.0d0/ 2.0d0, 0.0d0,         1.0d0/ 4.0d0,  5.0d0/ 8.0d0/)
  !AmatTarget(3, :) = (/1.0d0/2.0d0, 1.0d0/2.0d0, 1.0d0,        1.0d0/ 4.0d0,  5.0d0/ 8.0d0,  9.0d0/16.0d0/)
  !AmatTarget(4, :) = (/1.0d0/2.0d0, 0.0d0,       1.0d0/ 4.0d0, 1.0d0,         5.0d0/ 8.0d0,  5.0d0/16.0d0/)
  !AmatTarget(5, :) = (/1.0d0/2.0d0, 1.0d0/4.0d0, 5.0d0/ 8.0d0, 5.0d0/ 8.0d0,  9.0d0/ 8.0d0, 11.0d0/16.0d0/)
  !AmatTarget(6, :) = (/1.0d0/4.0d0, 5.0d0/8.0d0, 9.0d0/16.0d0, 5.0d0/16.0d0, 11.0d0/16.0d0,  9.0d0/ 8.0d0/)

  call MakeAMatrix

  @assertEqual(Amat, AmatTarget,"Samples from Bernoulli(p=0) should be 0.")

end subroutine
